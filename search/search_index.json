{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gradle Doctor The right prescription for your Gradle build. Watch this Virtual Android Makers 2019 entitled The Secrets of the Build Scan Plugin and the Internals of Gradle to learn more about what this plugin does. Usage Apply the Gradle Plugin to the root of your project. The Gradle Doctor will print suggestions for your build as you run regular tasks. Groovy plugins { id \"com.osacky.doctor\" version \"0.7.1\" } Kotlin plugins { id ( \"com.osacky.doctor\" ) version \"0.7.1\" } For legacy plugin application, see the Gradle Plugin Portal. Features Configurable warnings for build speed problems Measure time spent in Dagger annotation processors. Use Delect to save time. Ensure JAVA_HOME is set and matches IDE's JAVA_HOME Easily disable test caching. Tests may not declare all inputs causing false positives . Needed until Gradle implements a sandbox. Disable assembling all apps in repository simultaneously. Fail build when empty src directories are found. Empty src directories cause cache misses . Benchmarking remote build cache connection speed . Warnings for negative avoidance saving tasks. Build scan tags to easily find and categorize builds with warnings . Warn when not using Parallel GC in Java 9+. Configurable Warnings Warn when build spends more than 10% of the time garbage collecting. Warn when connection to maven repositories is slowing down the build. Warn when build cache connection speed is slowing down the build.","title":"Home"},{"location":"#gradle-doctor","text":"The right prescription for your Gradle build. Watch this Virtual Android Makers 2019 entitled The Secrets of the Build Scan Plugin and the Internals of Gradle to learn more about what this plugin does.","title":"Gradle Doctor"},{"location":"#usage","text":"Apply the Gradle Plugin to the root of your project. The Gradle Doctor will print suggestions for your build as you run regular tasks. Groovy plugins { id \"com.osacky.doctor\" version \"0.7.1\" } Kotlin plugins { id ( \"com.osacky.doctor\" ) version \"0.7.1\" } For legacy plugin application, see the Gradle Plugin Portal.","title":"Usage"},{"location":"#features","text":"Configurable warnings for build speed problems Measure time spent in Dagger annotation processors. Use Delect to save time. Ensure JAVA_HOME is set and matches IDE's JAVA_HOME Easily disable test caching. Tests may not declare all inputs causing false positives . Needed until Gradle implements a sandbox. Disable assembling all apps in repository simultaneously. Fail build when empty src directories are found. Empty src directories cause cache misses . Benchmarking remote build cache connection speed . Warnings for negative avoidance saving tasks. Build scan tags to easily find and categorize builds with warnings . Warn when not using Parallel GC in Java 9+.","title":"Features"},{"location":"#configurable-warnings","text":"Warn when build spends more than 10% of the time garbage collecting. Warn when connection to maven repositories is slowing down the build. Warn when build cache connection speed is slowing down the build.","title":"Configurable Warnings"},{"location":"changelog/","text":"Changelog Unreleased 0.7.1 Add error message for when the clean task has dependencies. PR Fix typo in warnWhenJetifierEnabled error message. PR Thanks kelvinharron 0.7.0 Don't check for empty source directories in Gradle 6.8. Gradle now ignores them by default. PR Warn when not using parallel GC in java 9+. Fixes #125 PR Remove redundant \"doctor\" build scan tag. 0.6.3 Fix ClassCastException caused by race condition. PR 0.6.2 Add threshold for negative avoidance savings. 0.6.1 Add build scan values for negative avoidance savings tasks. Prefix build scan tags with doctor- for easier searchability use wildcard doctor-* to find all build scans with doctor prescriptions. 0.6.0 Add warning when Android Jetifier is enabled. Print tasks with negative avoidance savings from the cache. Fixes #86 Add build scan tags to easily search and categorize builds. PR 0.5.1 Fix bugs in JAVA_HOME check #110 . Thanks ZacSweers 0.5.0 Check for farthest empty parent for reporting file to remove #105 . Fixes #96 Thanks ZacSweers Breaking API change Add more granularity to JAVA_HOME checks #104 . Fixes #98 Thanks ZacSweers 0.4.3 Experimental Configuration Cache support. Note: it is not fully supported, but it will not generate warnings. 0.4.2 Fix bug when running remote build cache benchmark and specifying a custom build cache directory. 0.4.1 Fix confusing warning about slow connection to maven repositories. Publish marker to maven central. 0.4.0 More control over which tasks are re-run in remote cache benchmark. See README.md for more information. Use Gradle Properties for lazy configuration and future configuration caching support. (Breaking API change) Fix performance by not using afterEvaluate . 0.3.4 Correctly calculate download speeds for build cache and remote repositories. 0.3.3 Print out number of tasks which were forced to re-execute. 0.3.2 Fix NPE when calculating remote benchmark cache. 0.3.1 Fix megabyte estimation Also add include Android resource compilation tasks in remote build cache estimation. 0.3.0 Ability to benchmark remote build cache connection speed.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#071","text":"Add error message for when the clean task has dependencies. PR Fix typo in warnWhenJetifierEnabled error message. PR Thanks kelvinharron","title":"0.7.1"},{"location":"changelog/#070","text":"Don't check for empty source directories in Gradle 6.8. Gradle now ignores them by default. PR Warn when not using parallel GC in java 9+. Fixes #125 PR Remove redundant \"doctor\" build scan tag.","title":"0.7.0"},{"location":"changelog/#063","text":"Fix ClassCastException caused by race condition. PR","title":"0.6.3"},{"location":"changelog/#062","text":"Add threshold for negative avoidance savings.","title":"0.6.2"},{"location":"changelog/#061","text":"Add build scan values for negative avoidance savings tasks. Prefix build scan tags with doctor- for easier searchability use wildcard doctor-* to find all build scans with doctor prescriptions.","title":"0.6.1"},{"location":"changelog/#060","text":"Add warning when Android Jetifier is enabled. Print tasks with negative avoidance savings from the cache. Fixes #86 Add build scan tags to easily search and categorize builds. PR","title":"0.6.0"},{"location":"changelog/#051","text":"Fix bugs in JAVA_HOME check #110 . Thanks ZacSweers","title":"0.5.1"},{"location":"changelog/#050","text":"Check for farthest empty parent for reporting file to remove #105 . Fixes #96 Thanks ZacSweers Breaking API change Add more granularity to JAVA_HOME checks #104 . Fixes #98 Thanks ZacSweers","title":"0.5.0"},{"location":"changelog/#043","text":"Experimental Configuration Cache support. Note: it is not fully supported, but it will not generate warnings.","title":"0.4.3"},{"location":"changelog/#042","text":"Fix bug when running remote build cache benchmark and specifying a custom build cache directory.","title":"0.4.2"},{"location":"changelog/#041","text":"Fix confusing warning about slow connection to maven repositories. Publish marker to maven central.","title":"0.4.1"},{"location":"changelog/#040","text":"More control over which tasks are re-run in remote cache benchmark. See README.md for more information. Use Gradle Properties for lazy configuration and future configuration caching support. (Breaking API change) Fix performance by not using afterEvaluate .","title":"0.4.0"},{"location":"changelog/#034","text":"Correctly calculate download speeds for build cache and remote repositories.","title":"0.3.4"},{"location":"changelog/#033","text":"Print out number of tasks which were forced to re-execute.","title":"0.3.3"},{"location":"changelog/#032","text":"Fix NPE when calculating remote benchmark cache.","title":"0.3.2"},{"location":"changelog/#031","text":"Fix megabyte estimation Also add include Android resource compilation tasks in remote build cache estimation.","title":"0.3.1"},{"location":"changelog/#030","text":"Ability to benchmark remote build cache connection speed.","title":"0.3.0"},{"location":"configuration/","text":"Configuration Sample Configuration Groovy doctor { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons = false /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold = . 5 f /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold = 0.10f /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold = 5000 /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching = true /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories = true /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously = false /** * Warn if using Android Jetifier. It slows down builds. */ warnWhenJetifierEnabled = true /** * Negative Avoidance Savings Threshold * By default the Gradle Doctor will print out a warning when a task is slower to pull from the cache than to * re-execute. There is some variance in the amount of time a task can take when several tasks are running * concurrently. In order to account for this there is a threshold you can set. When the difference is above the * threshold, a warning is displayed. */ negativeAvoidanceThreshold = 500 /** * Warn when not using parallel GC. Parallel GC is faster for build type tasks and is no longer the default in Java 9+. */ warnWhenNotUsingParallelGC = true /** * Throws an error when the `Delete` or `clean` task has dependencies. * If a clean task depends on other tasks, clean can be reordered and made to run after the tasks that would produce * output. This can lead to build failures or just strangeness with seemingly straightforward builds * (e.g., gradle clean build). * http://github.com/gradle/gradle/issues/2488 */ disallowCleanTaskDependencies = true /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches = true /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet = true /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Kotlin configure < DoctorExtension > { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons . set ( false ) /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold . set (. 5f ) /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold . set ( 0.10f ) /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold . set ( 5000 ) /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching . set ( true ) /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories . set ( true ) /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously . set ( false ) /** * Warn if using Android Jetifier. It slows down builds. */ warnWhenJetifierEnabled . set ( true ) /** * Negative Avoidance Savings Threshold * By default the Gradle Doctor will print out a warning when a task is slower to pull from the cache than to * re-execute. There is some variance in the amount of time a task can take when several tasks are running * concurrently. In order to account for this there is a threshold you can set. When the difference is above the * threshold, a warning is displayed. */ negativeAvoidanceThreshold . set ( 500 ) /** * Warn when not using parallel GC. Parallel GC is faster for build type tasks and is no longer the default in Java 9+. */ warnWhenNotUsingParallelGC . set ( true ) /** * Throws an error when the `Delete` or `clean` task has dependencies. * If a clean task depends on other tasks, clean can be reordered and made to run after the tasks that would produce * output. This can lead to build failures or just strangeness with seemingly straightforward builds * (e.g., gradle clean build). * http://github.com/gradle/gradle/issues/2488 */ val disallowCleanTaskDependencies . set ( true ) /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches . set ( true ) /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet . set ( true ) /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Configuration extension code is here.","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#sample-configuration","text":"Groovy doctor { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons = false /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold = . 5 f /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold = 0.10f /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold = 5000 /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching = true /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories = true /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously = false /** * Warn if using Android Jetifier. It slows down builds. */ warnWhenJetifierEnabled = true /** * Negative Avoidance Savings Threshold * By default the Gradle Doctor will print out a warning when a task is slower to pull from the cache than to * re-execute. There is some variance in the amount of time a task can take when several tasks are running * concurrently. In order to account for this there is a threshold you can set. When the difference is above the * threshold, a warning is displayed. */ negativeAvoidanceThreshold = 500 /** * Warn when not using parallel GC. Parallel GC is faster for build type tasks and is no longer the default in Java 9+. */ warnWhenNotUsingParallelGC = true /** * Throws an error when the `Delete` or `clean` task has dependencies. * If a clean task depends on other tasks, clean can be reordered and made to run after the tasks that would produce * output. This can lead to build failures or just strangeness with seemingly straightforward builds * (e.g., gradle clean build). * http://github.com/gradle/gradle/issues/2488 */ disallowCleanTaskDependencies = true /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches = true /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet = true /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Kotlin configure < DoctorExtension > { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons . set ( false ) /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold . set (. 5f ) /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold . set ( 0.10f ) /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold . set ( 5000 ) /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching . set ( true ) /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories . set ( true ) /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously . set ( false ) /** * Warn if using Android Jetifier. It slows down builds. */ warnWhenJetifierEnabled . set ( true ) /** * Negative Avoidance Savings Threshold * By default the Gradle Doctor will print out a warning when a task is slower to pull from the cache than to * re-execute. There is some variance in the amount of time a task can take when several tasks are running * concurrently. In order to account for this there is a threshold you can set. When the difference is above the * threshold, a warning is displayed. */ negativeAvoidanceThreshold . set ( 500 ) /** * Warn when not using parallel GC. Parallel GC is faster for build type tasks and is no longer the default in Java 9+. */ warnWhenNotUsingParallelGC . set ( true ) /** * Throws an error when the `Delete` or `clean` task has dependencies. * If a clean task depends on other tasks, clean can be reordered and made to run after the tasks that would produce * output. This can lead to build failures or just strangeness with seemingly straightforward builds * (e.g., gradle clean build). * http://github.com/gradle/gradle/issues/2488 */ val disallowCleanTaskDependencies . set ( true ) /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches . set ( true ) /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet . set ( true ) /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Configuration extension code is here.","title":"Sample Configuration"},{"location":"java-home/","text":"Java Home Mismatch and Multiple Gradle Daemons Using a different JDK for command line builds vs Android Studio or IntelliJ builds will cause a new Gradle daemon to spawn. This will instantly double the memory being used by Gradle. To fix this issue, we recommend setting your JAVA_HOME environment variable and then using this JAVA_HOME as the JDK used by Android Studio or IntelliJ. Set JAVA_HOME Set JAVA_HOME so that switching between Android Studio and the terminal does not trigger a full rebuild. To set JAVA_HOME (using bash): echo \\\"export JAVA_HOME=${'$'}(/usr/libexec/java_home)\\\" >> ~/.bash_profile or ~/.zshrc if using zsh . Using JAVA_HOME from Android Studio: To Fix: Open Module Settings (F4) Click SDK Location Set JDK location to JAVA_HOME View all Gradle Daemons jps will print out all the java processes on the system and the process id (pid). Killing Gradle Daemons ./gradlew --stop will kill all Gradle Daemons with the current Gradle version. pkill -f '.*GradleDaemon.*' will kill all Gradle Daemons regardless of version.","title":"Java Home"},{"location":"java-home/#java-home-mismatch-and-multiple-gradle-daemons","text":"Using a different JDK for command line builds vs Android Studio or IntelliJ builds will cause a new Gradle daemon to spawn. This will instantly double the memory being used by Gradle. To fix this issue, we recommend setting your JAVA_HOME environment variable and then using this JAVA_HOME as the JDK used by Android Studio or IntelliJ.","title":"Java Home Mismatch and Multiple Gradle Daemons"},{"location":"java-home/#set-java_home","text":"Set JAVA_HOME so that switching between Android Studio and the terminal does not trigger a full rebuild. To set JAVA_HOME (using bash): echo \\\"export JAVA_HOME=${'$'}(/usr/libexec/java_home)\\\" >> ~/.bash_profile or ~/.zshrc if using zsh .","title":"Set JAVA_HOME"},{"location":"java-home/#using-java_home-from-android-studio","text":"To Fix: Open Module Settings (F4) Click SDK Location Set JDK location to JAVA_HOME","title":"Using JAVA_HOME from Android Studio:"},{"location":"java-home/#view-all-gradle-daemons","text":"jps will print out all the java processes on the system and the process id (pid).","title":"View all Gradle Daemons"},{"location":"java-home/#killing-gradle-daemons","text":"./gradlew --stop will kill all Gradle Daemons with the current Gradle version. pkill -f '.*GradleDaemon.*' will kill all Gradle Daemons regardless of version.","title":"Killing Gradle Daemons"},{"location":"releasing/","text":"Releasing Create a local release branch from master git checkout master git pull git checkout -b release_0.7.2 Update version in doctor-plugin/build.gradle.kts (remove -SNAPSHOT ) version = \"0.7.2\" Update the current version and next version in mkdocs.yml : extra: doctor: release: '0.7.2' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Take one last look git diff Commit all local changes git commit -am \"Prepare 0.7.2 release\" Create a tag and push it git tag v0.7.2 git push origin v0.7.2 Upload to Maven Central ./gradlew publishToMavenCentral -Dorg.gradle.internal.publish.checksums.insecure = true Upload to Gradle Plugin Portal ./gradlew publishToGradlePlugin Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Merge the release branch to master git checkout master git pull git merge --no-ff release_0.7.2 Update version in doctor-plugin/build.gradle.kts (increase version and add -SNAPSHOT ) version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push","title":"Releasing"},{"location":"releasing/#releasing","text":"Create a local release branch from master git checkout master git pull git checkout -b release_0.7.2 Update version in doctor-plugin/build.gradle.kts (remove -SNAPSHOT ) version = \"0.7.2\" Update the current version and next version in mkdocs.yml : extra: doctor: release: '0.7.2' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Take one last look git diff Commit all local changes git commit -am \"Prepare 0.7.2 release\" Create a tag and push it git tag v0.7.2 git push origin v0.7.2 Upload to Maven Central ./gradlew publishToMavenCentral -Dorg.gradle.internal.publish.checksums.insecure = true Upload to Gradle Plugin Portal ./gradlew publishToGradlePlugin Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Merge the release branch to master git checkout master git pull git merge --no-ff release_0.7.2 Update version in doctor-plugin/build.gradle.kts (increase version and add -SNAPSHOT ) version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push","title":"Releasing"},{"location":"remote-cache/","text":"Remote Build Cache Benchmark More information How fast does my internet connection need to be in order to benefit from the Gradle Remote Build Cache? Read Part 1 and Part 2 Basic Benchmark To start the benchmark, run a Gradle task that you would like to profile with the flag -PbenchmarkRemoteCache To force tasks to rerun for the benchmark, use -PrerunSourceTasksForBenchmark and -PrerunLargeOutputTasksForBenchmark to control which tasks are forced to re-run as part of the benchmark. Example full benchmark scenario: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache -PrerunSourceTasksForBenchmark -PrerunLargeOutputTasksForBenchmark ` Customized Benchmark Scenario You can also omit the rerun properties in order to measure the individual performance of specific tasks by forcing tasks to rerun with outputs.upToDateWhen { false } . For example: tasks . withType ( SourceTask ). configureEach { outputs . upToDateWhen { false } } Then run the specific benchmark scenario like so: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache ` Benchmark Result Report This is an example remote cache benchmark report. =============================== Gradle Doctor Prescriptions ============================================ | = Remote Build Cache Benchmark Report = | | Executed tasks created compressed artifacts of size 159,93 MB | | Total Task execution time was 208,85 s | | | | In order for a remote build cache to save you time, you would need an internet connection to your | | node of at least 0,77 MB/s. | | Check a build scan to see your connection speed to the build cache node. | | Build cache node throughput may be different than your internet connection speed. | | | | A 1 MB/s connection would save you 48,92 s. | | A 2 MB/s connection would save you 128,88 s. | | A 10 MB/s connection would save you 192,86 s. i | | | | Note: This is an estimate. Real world performance may vary. This estimate does not take in to accoun | | t time spent decompressing cached artifacts or roundtrip communication time to the cache node. | ========================================================================================================","title":"Remote Cache Benchmark"},{"location":"remote-cache/#remote-build-cache-benchmark","text":"","title":"Remote Build Cache Benchmark"},{"location":"remote-cache/#more-information","text":"How fast does my internet connection need to be in order to benefit from the Gradle Remote Build Cache? Read Part 1 and Part 2","title":"More information"},{"location":"remote-cache/#basic-benchmark","text":"To start the benchmark, run a Gradle task that you would like to profile with the flag -PbenchmarkRemoteCache To force tasks to rerun for the benchmark, use -PrerunSourceTasksForBenchmark and -PrerunLargeOutputTasksForBenchmark to control which tasks are forced to re-run as part of the benchmark. Example full benchmark scenario: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache -PrerunSourceTasksForBenchmark -PrerunLargeOutputTasksForBenchmark `","title":"Basic Benchmark"},{"location":"remote-cache/#customized-benchmark-scenario","text":"You can also omit the rerun properties in order to measure the individual performance of specific tasks by forcing tasks to rerun with outputs.upToDateWhen { false } . For example: tasks . withType ( SourceTask ). configureEach { outputs . upToDateWhen { false } } Then run the specific benchmark scenario like so: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache `","title":"Customized Benchmark Scenario"},{"location":"remote-cache/#benchmark-result-report","text":"This is an example remote cache benchmark report. =============================== Gradle Doctor Prescriptions ============================================ | = Remote Build Cache Benchmark Report = | | Executed tasks created compressed artifacts of size 159,93 MB | | Total Task execution time was 208,85 s | | | | In order for a remote build cache to save you time, you would need an internet connection to your | | node of at least 0,77 MB/s. | | Check a build scan to see your connection speed to the build cache node. | | Build cache node throughput may be different than your internet connection speed. | | | | A 1 MB/s connection would save you 48,92 s. | | A 2 MB/s connection would save you 128,88 s. | | A 10 MB/s connection would save you 192,86 s. i | | | | Note: This is an estimate. Real world performance may vary. This estimate does not take in to accoun | | t time spent decompressing cached artifacts or roundtrip communication time to the cache node. | ========================================================================================================","title":"Benchmark Result Report"},{"location":"scan-tags/","text":"Build Scan Tags Gradle Doctor automatically adds build scan tags to help categorize and filter builds when using Gradle Enterprise The doctor tag will be added to a build when a prescription is suggested by the Gradle Doctor. In addition to the doctor tag, the following tags will also be added depending on the prescription. You can search for all of these tags by entering doctor-* in the tags in the build scan list. doctor-high-gc - build spends a longer percentage GCing than defined by GCWarningThreshold . Default 10%. doctor-negative-savings - build had a task that took longer to pull from the cache than it would take to re-execute. See negative savings for information on how to avoid this. doctor-slow-build-cache-connection - build's connection speed to the build cache slower than the minimum speeds defined by downloadSpeedWarningThreshold . Default 0.5MB/s. doctor-slow-maven-connection - build's connection speed to maven repositories was slower than the minimum speeds defined by downloadSpeedWarningThreshold . Default 0.5MB/s. doctor-long-dagger-time - build spent longer with Dagger annotation processors than minimum defined by daggerThreshold . Default: 5 seconds. doctor-java-home - JAVA_HOME is not defined or does not match the JAVA_HOME used in this build.","title":"Build Scan Tags"},{"location":"scan-tags/#build-scan-tags","text":"Gradle Doctor automatically adds build scan tags to help categorize and filter builds when using Gradle Enterprise The doctor tag will be added to a build when a prescription is suggested by the Gradle Doctor. In addition to the doctor tag, the following tags will also be added depending on the prescription. You can search for all of these tags by entering doctor-* in the tags in the build scan list. doctor-high-gc - build spends a longer percentage GCing than defined by GCWarningThreshold . Default 10%. doctor-negative-savings - build had a task that took longer to pull from the cache than it would take to re-execute. See negative savings for information on how to avoid this. doctor-slow-build-cache-connection - build's connection speed to the build cache slower than the minimum speeds defined by downloadSpeedWarningThreshold . Default 0.5MB/s. doctor-slow-maven-connection - build's connection speed to maven repositories was slower than the minimum speeds defined by downloadSpeedWarningThreshold . Default 0.5MB/s. doctor-long-dagger-time - build spent longer with Dagger annotation processors than minimum defined by daggerThreshold . Default: 5 seconds. doctor-java-home - JAVA_HOME is not defined or does not match the JAVA_HOME used in this build.","title":"Build Scan Tags"},{"location":"slower-from-cache/","text":"Slower From Cache (Negative Savings) Some tasks may be slower to pull from the Gradle Build cache. The hardware of the machine running the origin task and which computations are running in parallel when pulling from the cache or up-to-date checking may also cause slower from cache times than the original task. In general, tasks that are computationally cheap but expensive on the disk are not good candidates to be cached. The threshold can be increased by setting negativeAvoidanceThreshold in the doctor configuration . Groovy negativeAvoidanceThreshold = 500 Kotlin negativeAvoidanceThreshold . set ( 500 ) Copy tasks A copy task should not be cached. The output of a copy task would need to be compressed and then stored in the build cache. To restore the copy task from the cache, Gradle would decompress the outputs and then rewrite them in the output directories. Simply performing the copy again would simply move the files from their original location without need to compress and then decompress them. Non compressible outputs Tasks which generate large output which is not easily compressible may also not be good candidates for the build cache. Tasks that move compressed images like pngs, jpegs, or precomputed libraries are not good caching candidates. Disabling caching Groovy tasks . named ( \"<taskname>\" ). configure { outputs . cacheIf { false } } Kotlin tasks . named ( ' < taskname > ' ). configure { outputs . cacheIf { false } } Disabling remote caching Some Gradle tasks may be beneficial to cache locally but not on CI. There is currently no mechanism to only disable remote caching of tasks. A workaround is to disable the cache entry being placed in to the remote build cache. Groovy tasks . named ( '<taskname>' ). configure { outputs . cacheIf { ! isCI } } Kotlin tasks . named ( \"<taskname>\" ). configure { outputs . cacheIf { ! isCI } } See Remote Build Cache Benchmark for more information on estimating whether it is beneficial to remotely cache tasks.","title":"Slower From Cache"},{"location":"slower-from-cache/#slower-from-cache-negative-savings","text":"Some tasks may be slower to pull from the Gradle Build cache. The hardware of the machine running the origin task and which computations are running in parallel when pulling from the cache or up-to-date checking may also cause slower from cache times than the original task. In general, tasks that are computationally cheap but expensive on the disk are not good candidates to be cached. The threshold can be increased by setting negativeAvoidanceThreshold in the doctor configuration . Groovy negativeAvoidanceThreshold = 500 Kotlin negativeAvoidanceThreshold . set ( 500 )","title":"Slower From Cache (Negative Savings)"},{"location":"slower-from-cache/#copy-tasks","text":"A copy task should not be cached. The output of a copy task would need to be compressed and then stored in the build cache. To restore the copy task from the cache, Gradle would decompress the outputs and then rewrite them in the output directories. Simply performing the copy again would simply move the files from their original location without need to compress and then decompress them.","title":"Copy tasks"},{"location":"slower-from-cache/#non-compressible-outputs","text":"Tasks which generate large output which is not easily compressible may also not be good candidates for the build cache. Tasks that move compressed images like pngs, jpegs, or precomputed libraries are not good caching candidates.","title":"Non compressible outputs"},{"location":"slower-from-cache/#disabling-caching","text":"Groovy tasks . named ( \"<taskname>\" ). configure { outputs . cacheIf { false } } Kotlin tasks . named ( ' < taskname > ' ). configure { outputs . cacheIf { false } }","title":"Disabling caching"},{"location":"slower-from-cache/#disabling-remote-caching","text":"Some Gradle tasks may be beneficial to cache locally but not on CI. There is currently no mechanism to only disable remote caching of tasks. A workaround is to disable the cache entry being placed in to the remote build cache. Groovy tasks . named ( '<taskname>' ). configure { outputs . cacheIf { ! isCI } } Kotlin tasks . named ( \"<taskname>\" ). configure { outputs . cacheIf { ! isCI } } See Remote Build Cache Benchmark for more information on estimating whether it is beneficial to remotely cache tasks.","title":"Disabling remote caching"}]}